name: Deploy AI Assistant

on:
  push:
    branches:
      - main

jobs:
  # CI Job: Run Unit and Integration Tests
  test:
    runs-on: ubuntu-latest

    steps:
    # Checkout code
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 

    # Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    # Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Run Unit Tests
    - name: Run Unit Tests
      run: |
        pytest tests/unit --junitxml=unit-test-report.xml

    # Run Integration Tests
    - name: Run Integration Tests
      run: |
        pytest tests/integration --junitxml=integration-test-report.xml

  # CD Job: Build and Deploy
  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service: [fastapi, streamlit]

    steps:
    # Checkout code
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 

    # Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Log in to DockerHub
    - name: Log in to DockerHub
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    # Build and push image
    - name: Build and push ${{ matrix.service }} image
      run: |
        docker buildx build \
          --platform linux/amd64 \
          --push \
          --cache-from=type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:latest \
          --cache-to=type=inline \
          --tag ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:latest \
          --tag ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:${{ github.sha }} \
          ${{ github.workspace }}/${{ matrix.service }}

    # Create .env file for secrets
    - name: Create .env file
      run: |
        echo "DEPLOYED_URL=${{ secrets.DEPLOYED_URL }}" > .env
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
        echo "PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}" >> .env
        echo "INDEX_NAME=${{ secrets.INDEX_NAME }}" >> .env
        echo "IMG_INDEX_NAME=${{ secrets.IMG_INDEX_NAME }}" >> .env
        echo "YOUTUBE_INDEX=${{ secrets.YOUTUBE_INDEX }}" >> .env
        echo "DIMENSION=${{ secrets.DIMENSION }}" >> .env
        echo "METRIC=${{ secrets.METRIC }}" >> .env
        echo "SNOWFLAKE_USER=${{ secrets.SNOWFLAKE_USER }}" >> .env
        echo "SNOWFLAKE_PASSWORD=${{ secrets.SNOWFLAKE_PASSWORD }}" >> .env
        echo "SNOWFLAKE_ACCOUNT=${{ secrets.SNOWFLAKE_ACCOUNT }}" >> .env
        echo "SNOWFLAKE_WAREHOUSE=${{ secrets.SNOWFLAKE_WAREHOUSE }}" >> .env
        echo "SNOWFLAKE_DATABASE=${{ secrets.SNOWFLAKE_DATABASE }}" >> .env
        echo "SNOWFLAKE_SCHEMA=${{ secrets.SNOWFLAKE_SCHEMA }}" >> .env
        echo "YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}" >> .env
        echo "CLOUD_PROVIDER=${{ secrets.CLOUD_PROVIDER }}" >> .env 
        echo "REGION=${{ secrets.REGION }}" >> .env      
        echo "IMAGE_DIMENSIONS=${{ secrets.IMAGE_DIMENSIONS }}" >> .env  

    - name: Copy .env file to EC2
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        source: .env
        target: /home/ubuntu/

    - name: Copy docker-compose.yml to EC2
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        source: ./docker-compose.yml
        target: /home/ubuntu/

    - name: Deploy on EC2
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          docker network inspect learningassistant_app-network || docker network create learningassistant_app-network
          docker-compose pull
          docker-compose up -d --remove-orphans

    # Verify Deployment
    - name: Check ${{ matrix.service }} service health
      run: |
        retries=10
        delay=10
        url=$([[ "${{ matrix.service }}" == "fastapi" ]] && echo "http://3.22.249.244:8000/docs" || echo "http://3.22.249.244:8501")
        for i in $(seq 1 $retries); do
          echo "Checking ${{ matrix.service }} service health (attempt $i/$retries)..."
          curl -f $url && break || sleep $delay
        done
